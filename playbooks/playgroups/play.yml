- hosts: all

  tasks:

    - name: list groups
      debug: 
        msg: "{{ groups }}"

    - set_fact:
        groups_number: "{{ groups |length }}" 
        groups_elements_lengths: []

    - name: count group elements
      set_fact:
        groups_elements_lengths: "{{ groups_elements_lengths + [ item.value |length ] }}"
      loop: "{{ lookup('dict', groups) }}"
      when:  
       - '"run_" not in item.key'
       - 'item.key != "all"'
       - 'item.key != "ungruped"'

    - name: debug count group elements
      debug:
        msg: "{{ groups_elements_lengths }}"

    - name: group max
      set_fact:
        group_elements_count_max: "{{ groups_elements_lengths |max }}"
        group_elements_count_max_sequence: []


    #I dont know how to put end={{ group_elements_count_max }} into lookup sequence
    #list of numbers 0 1 2 3 .. group_elements_count_max-1
    - name: group_elements_count_max_sequence 
      set_fact:
        group_elements_count_max_sequence: "{{ group_elements_count_max_sequence + [item]  }}"
      with_sequence: 'end={{ group_elements_count_max |int - 1 }} start=0'

    - name: compute run_groups
      include_tasks: compute_run_groups.yml
      loop: "{{ lookup('dict', groups) }}"
      loop_control:
        loop_var: outer_group_item
      when:  
       - 'outer_group_item.key != "all"'
       - 'outer_group_item.key != "ungruped"'


    - name: list groups
      debug: 
        msg: "{{ groups }}"
      run_once: yes


- hosts: run_*

  tasks:
    - name: list groups
      debug: 
        msg: "{{ groups }}"
      run_once: yes

    - name: set
      set_fact:
        groups_run: {}
        groups_run_sequence: []

    - name: create RUN group elements
      set_fact:
        groups_run: '{{  groups_run |combine( {item.key: item.value}) }}'
      when:  
       - '"run_" in item.key'
       - 'item.key != "all"'
       - 'item.key != "ungruped"'
      with_dict: "{{ groups }}"
      run_once: yes

    #I dont know how to put end={{ group_elements_count_max }} into lookup sequence
    #list of numbers 0 1 2 ..  {{ groups |length - 1 }}
    - name: groups_run_sequence 
      set_fact:
        groups_run_sequence: "{{ groups_run_sequence + [item]  }}"
      with_sequence: 'end={{ groups_run |length |int - 1 }} start=0'

    - name: print RUN group elements
      debug: 
        msg: "{{ groups_run }}"
      run_once: yes

#gdyby tylko dalo sie zorbic include_playboook w pentli zamiast import_playbook ktore jest statyczne
    # run groups_run_sequence number of times N groups
    - name: run (for all groups) one host per group at same time (if run_N group is not empty)
      include_tasks: loop_run_groups.yml
      loop: "{{ groups_run_sequence }}"
      loop_control:
        loop_var: run_N_item

